import Head from 'next/head'
import { useQuery, QueryClient, QueryClientProvider } from 'react-query'

import { Heading, Flex, Box } from '@chakra-ui/react'
// import { Menu, MenuButton, MenuList, MenuItem } from '@chakra-ui/react'

import styles from './Fakenews.module.css'
import ListItem from './components/ListItem'
import NavMenu from '@common/components/Menu'
import { ReactElement } from 'react'
// import { functionalUpdate } from 'react-query/lib/core/utils'

import { TNews } from '@pages/api/fake'

const getNews = (): Promise<TNews> => fetch('/api/fake').then(res => res.json())

const Fakenews = () => {
  // const queryClient = useQueryClient()
  const query = useQuery(['news'], getNews)

  // const [postURLs, setPostURLs] = useState<string[]>([])
  // const [page, setPage] = useState<string>('topstories')

  // useEffect(() => {
  //   setPostURLs([])
  //   getPosts(page).then(res => setPostURLs(res))
  // }, [page, setPostURLs])

  if (query.isLoading) return <span>Loading...</span>

  if (query.isError) return <span>{`Error: ${query.error}`}</span>

  return (
    <Flex display="flex" minH="100vh" direction="column" justifyContent="center" alignItems="center">
      <Head>
        <title>Fake News</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box className={styles.main} px={[4, 10]}>
        <Heading as="h1" size={{ base: 'xl', md: '4xl' }}>
          Hacker <span style={{ color: 'teal' }}>news</span>
        </Heading>

        <NavMenu />

        <Flex direction="row" justify="space-between" align="center" width="100%" mt="12">
          <Heading as="h1" size={{ base: 'md', md: 'xl' }}>
            Heading
          </Heading>
          {/* <Menu> */}
          {/*   <MenuButton as={Button} rightIcon={<ChevronDownIcon />}> */}
          {/*     Page */}
          {/*   </MenuButton> */}
          {/*   <MenuList> */}
          {/*     <MenuItem onClick={() => setPage('topstories')}>Top</MenuItem> */}
          {/*     <MenuItem onClick={() => setPage('newstories')}>New</MenuItem> */}
          {/*     <MenuItem onClick={() => setPage('showstories')}>Show</MenuItem> */}
          {/*   </MenuList> */}
          {/* </Menu> */}
        </Flex>
        <Flex direction="column" width="100%" mt="8">
          {query.data.articles.map((art, idx) => (
            // <ListItem postURL={postURL} key={idx} idx={idx} />
            <ListItem art={art} key={idx} idx={idx} />
          ))}
        </Flex>
      </Box>
    </Flex>
  )
}

// {posts.map((post, idx) => (
//   <ListItem item={post} key={post.id} index={(page - 1).  * PAGE_SIZE + idx + 1} />
// ))}

export default Fakenews

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      cacheTime: 1000 * 60 * 60 * 24, // 24 hours
      staleTime: 1000 * 60 * 60 * 12, // 12 hours
    },
  },
})

Fakenews.getLayout = function getLayout(page: ReactElement) {
  return <QueryClientProvider client={queryClient}>{page}</QueryClientProvider>
}

// async function getPosts(page: string) {
//   const baseURL = 'https://hacker-news.firebaseio.com/v0/'
//   const pageURL = `${baseURL}${page}.json`
//   const pageSize = 20
//   let pageNum = 1
//   let posts = await fetch(pageURL).then(res => res.json())

//   pageNum = pageNum == 0 ? 0 : pageNum - 1
//   const slicedPosts: number[] = posts.slice(
//     Number(pageNum) * Number(pageSize),
//     (Number(pageNum) + 1) * Number(pageSize)
//   )
//   const postURLs = slicedPosts.map(postID => `https://hacker-news.firebaseio.com/v1/item/${postID}.json`)

//   return postURLs
// }

// const onLoadMore = () => {
//  router.push(`?page=${Number(page)+1}`)
// }
// <MenuList>
//   { Array.from(Array(25).keys()).map(item => <MenuItem key={item} onClick={() => onLoadMore(item+1)}>{item+1}</MenuItem>)}
// </MenuList>
